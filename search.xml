<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spring事务失效问题</title>
      <link href="/2022/05/24/Spring%E4%BA%8B%E5%8A%A1%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98/"/>
      <url>/2022/05/24/Spring%E4%BA%8B%E5%8A%A1%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring中事务失效的情况"><a href="#Spring中事务失效的情况" class="headerlink" title="Spring中事务失效的情况"></a>Spring中事务失效的情况</h2><p>官方文档：<a href="https://docs.spring.io/spring-framework/docs/current/reference/html/data-access.html#transaction">Data Access (spring.io)</a></p><h4 id="1-方法可见性和-Transactional-Method-visibility-and-Transactional"><a href="#1-方法可见性和-Transactional-Method-visibility-and-Transactional" class="headerlink" title="1.方法可见性和@Transactional  (Method visibility and @Transactional)"></a>1.方法可见性和@Transactional  (Method visibility and @Transactional)</h4><p>When you use transactional proxies with Spring’s standard configuration, you should apply the annotation only to methods with visibility. If you do annotate , , or package-visible methods with the annotation, no error is raised, but the annotated method does not exhibit the configured transactional settings.<br>当您将事务代理与Spring的标准配置一起使用时，您应该仅将注解应用于具有可见性的方法(public方法)。如果您？？？(不会翻译)或对包可见方法使用注解，则不会引发任何错误，但带注解的方法不会显示配置的事务设置。</p><h5 id="遇到的相关问题"><a href="#遇到的相关问题" class="headerlink" title="遇到的相关问题"></a>遇到的相关问题</h5><p><img src="/2022/05/24/Spring%E4%BA%8B%E5%8A%A1%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98/errorSource.png"></p><p><img src="/2022/05/24/Spring%E4%BA%8B%E5%8A%A1%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98/errorInfo.png"></p><p>private修饰的方法，spring无法生成动态代理。AOP代理分别在intercept()和invoke()方法判断是否进行事务拦截，这两个方法都会间接调用AbstractFallbackTransactionAttributeSource类的computeTransactionAttribute方法来获取事务控制的相关属性。(作者：爪哇驿站 链接：<a href="https://www.zhihu.com/question/334666648/answer/2250122133">https://www.zhihu.com/question/334666648/answer/2250122133</a>)</p><pre><code class="java">protected TransactionAttribute computeTransactionAttribute(Method method, @Nullable Class&lt;?&gt; targetClass) {        if (this.allowPublicMethodsOnly() &amp;&amp; !Modifier.isPublic(method.getModifiers())) {            return null;        } else {            ...        }}</code></pre><p>上述代码会导致no-public方法无法进入事务控制。</p><h4 id="2-方法内部调用"><a href="#2-方法内部调用" class="headerlink" title="2.方法内部调用"></a>2.方法内部调用</h4><p> In proxy mode (which is the default), only external method calls coming in through the proxy are intercepted. This means that self-invocation (in effect, a method within the target object calling another method of the target object) does not lead to an actual transaction at runtime even if the invoked method is marked with . Also, the proxy must be fully initialized to provide the expected behavior, so you should not rely on this feature in your initialization code — for example, in a method.<br>在代理模式(这是默认设置)中，仅拦截通过代理传入的外部方法调用。这意味着自调用(实际上，目标对象内的方法调用目标对象的另一个方法)在运行时不会导致实际的事务生效即使调用的方法被标记。此外，代理必须完全初始化才能提供预期的行为，因此不应在初始化代码(例如，在方法中)依赖此功能。</p><h5 id="遇到的相关问题-1"><a href="#遇到的相关问题-1" class="headerlink" title="遇到的相关问题"></a>遇到的相关问题</h5><pre><code class="java">@Servicepublic class VoucherOrderServiceImpl extends ServiceImpl&lt;VoucherOrderMapper, VoucherOrder&gt; implements IVoucherOrderService {    @Override    public Result seckillVoucher(Long voucherId) {        ...        Long userId = UserHolder.getUser().getId();        synchronized (userId.toString().intern()) {            //获取代理对象，涉及事务的失效问题            IVoucherOrderService proxy = (IVoucherOrderService) AopContext.currentProxy();            return proxy.createVoucherOrder(voucherId);        }    }        @Transactional    public Result createVoucherOrder(Long voucherId) {        ...    }}</code></pre><p>如上述代码所示只对createVoucherOrder()加了注解，在seckillVoucher()中直接调用createVoucherOrder()时，实际是通过this.createVoucher()调用的，目标对象是没有事务功能的。这里需要通过AopContext.currentProxy()方法获取当前对象的代理对象，再通过代理对象调用createVoucherOrder()方法。</p><p>相关配置如下:<br>pom.xml文件中导入依赖</p><pre><code class="java">&lt;dependency&gt;    &lt;groupId&gt;org.aspectj&lt;/groupId&gt;    &lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt;&lt;/dependency&gt;</code></pre><p>项目启动类添加@EnableAspectJAutoProxy(exposeProxy = true)</p><pre><code class="java">@EnableAspectJAutoProxy(exposeProxy = true)@MapperScan("com.hmdp.mapper")@SpringBootApplicationpublic class HmDianPingApplication {    public static void main(String[] args) {        SpringApplication.run(HmDianPingApplication.class, args);    }}</code></pre><p>未完待续…</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
          <category> Data Access </category>
          
          <category> Transaction Management </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git初体验</title>
      <link href="/2022/05/23/Git%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
      <url>/2022/05/23/Git%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<hr><p><img src="/2022/05/23/Git%E5%88%9D%E4%BD%93%E9%AA%8C/gitpng.png" alt="cover"></p><h2 id="git-2-36-1安装"><a href="#git-2-36-1安装" class="headerlink" title="git 2.36.1安装"></a>git 2.36.1安装</h2>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> 2.36.1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/05/23/hello-world/"/>
      <url>/2022/05/23/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new "My New Post"</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
